// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hieunlt/themis/ent/preset"
)

// Preset is the model entity for the Preset schema.
type Preset struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Display holds the value of the "display" field.
	Display string `json:"display,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// IsPositive holds the value of the "is_positive" field.
	IsPositive bool `json:"is_positive,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PresetQuery when eager-loading is set.
	Edges        PresetEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PresetEdges holds the relations/edges for other nodes in the graph.
type PresetEdges struct {
	// Reviews holds the value of the reviews edge.
	Reviews []*Review `json:"reviews,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ReviewsOrErr returns the Reviews value or an error if the edge
// was not loaded in eager-loading.
func (e PresetEdges) ReviewsOrErr() ([]*Review, error) {
	if e.loadedTypes[0] {
		return e.Reviews, nil
	}
	return nil, &NotLoadedError{edge: "reviews"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Preset) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case preset.FieldIsActive, preset.FieldIsPositive:
			values[i] = new(sql.NullBool)
		case preset.FieldID:
			values[i] = new(sql.NullInt64)
		case preset.FieldDisplay:
			values[i] = new(sql.NullString)
		case preset.FieldCreatedAt, preset.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Preset fields.
func (pr *Preset) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case preset.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case preset.FieldDisplay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display", values[i])
			} else if value.Valid {
				pr.Display = value.String
			}
		case preset.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				pr.IsActive = value.Bool
			}
		case preset.FieldIsPositive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_positive", values[i])
			} else if value.Valid {
				pr.IsPositive = value.Bool
			}
		case preset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = new(time.Time)
				*pr.CreatedAt = value.Time
			}
		case preset.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = new(time.Time)
				*pr.UpdatedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Preset.
// This includes values selected through modifiers, order, etc.
func (pr *Preset) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryReviews queries the "reviews" edge of the Preset entity.
func (pr *Preset) QueryReviews() *ReviewQuery {
	return NewPresetClient(pr.config).QueryReviews(pr)
}

// Update returns a builder for updating this Preset.
// Note that you need to call Preset.Unwrap() before calling this method if this Preset
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Preset) Update() *PresetUpdateOne {
	return NewPresetClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Preset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Preset) Unwrap() *Preset {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Preset is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Preset) String() string {
	var builder strings.Builder
	builder.WriteString("Preset(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("display=")
	builder.WriteString(pr.Display)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_positive=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsPositive))
	builder.WriteString(", ")
	if v := pr.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pr.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Presets is a parsable slice of Preset.
type Presets []*Preset
