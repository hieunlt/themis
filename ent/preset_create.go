// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hieunlt/themis/ent/preset"
	"github.com/hieunlt/themis/ent/review"
)

// PresetCreate is the builder for creating a Preset entity.
type PresetCreate struct {
	config
	mutation *PresetMutation
	hooks    []Hook
}

// SetDisplay sets the "display" field.
func (pc *PresetCreate) SetDisplay(s string) *PresetCreate {
	pc.mutation.SetDisplay(s)
	return pc
}

// SetIsActive sets the "is_active" field.
func (pc *PresetCreate) SetIsActive(b bool) *PresetCreate {
	pc.mutation.SetIsActive(b)
	return pc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pc *PresetCreate) SetNillableIsActive(b *bool) *PresetCreate {
	if b != nil {
		pc.SetIsActive(*b)
	}
	return pc
}

// SetIsPositive sets the "is_positive" field.
func (pc *PresetCreate) SetIsPositive(b bool) *PresetCreate {
	pc.mutation.SetIsPositive(b)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PresetCreate) SetCreatedAt(t time.Time) *PresetCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PresetCreate) SetNillableCreatedAt(t *time.Time) *PresetCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PresetCreate) SetUpdatedAt(t time.Time) *PresetCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PresetCreate) SetNillableUpdatedAt(t *time.Time) *PresetCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (pc *PresetCreate) AddReviewIDs(ids ...int) *PresetCreate {
	pc.mutation.AddReviewIDs(ids...)
	return pc
}

// AddReviews adds the "reviews" edges to the Review entity.
func (pc *PresetCreate) AddReviews(r ...*Review) *PresetCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddReviewIDs(ids...)
}

// Mutation returns the PresetMutation object of the builder.
func (pc *PresetCreate) Mutation() *PresetMutation {
	return pc.mutation
}

// Save creates the Preset in the database.
func (pc *PresetCreate) Save(ctx context.Context) (*Preset, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PresetCreate) SaveX(ctx context.Context) *Preset {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PresetCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PresetCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PresetCreate) defaults() {
	if _, ok := pc.mutation.IsActive(); !ok {
		v := preset.DefaultIsActive
		pc.mutation.SetIsActive(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := preset.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := preset.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PresetCreate) check() error {
	if _, ok := pc.mutation.Display(); !ok {
		return &ValidationError{Name: "display", err: errors.New(`ent: missing required field "Preset.display"`)}
	}
	if v, ok := pc.mutation.Display(); ok {
		if err := preset.DisplayValidator(v); err != nil {
			return &ValidationError{Name: "display", err: fmt.Errorf(`ent: validator failed for field "Preset.display": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Preset.is_active"`)}
	}
	if _, ok := pc.mutation.IsPositive(); !ok {
		return &ValidationError{Name: "is_positive", err: errors.New(`ent: missing required field "Preset.is_positive"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Preset.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Preset.updated_at"`)}
	}
	return nil
}

func (pc *PresetCreate) sqlSave(ctx context.Context) (*Preset, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PresetCreate) createSpec() (*Preset, *sqlgraph.CreateSpec) {
	var (
		_node = &Preset{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(preset.Table, sqlgraph.NewFieldSpec(preset.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Display(); ok {
		_spec.SetField(preset.FieldDisplay, field.TypeString, value)
		_node.Display = value
	}
	if value, ok := pc.mutation.IsActive(); ok {
		_spec.SetField(preset.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := pc.mutation.IsPositive(); ok {
		_spec.SetField(preset.FieldIsPositive, field.TypeBool, value)
		_node.IsPositive = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(preset.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(preset.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := pc.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   preset.ReviewsTable,
			Columns: preset.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PresetCreateBulk is the builder for creating many Preset entities in bulk.
type PresetCreateBulk struct {
	config
	err      error
	builders []*PresetCreate
}

// Save creates the Preset entities in the database.
func (pcb *PresetCreateBulk) Save(ctx context.Context) ([]*Preset, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Preset, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PresetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PresetCreateBulk) SaveX(ctx context.Context) []*Preset {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PresetCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PresetCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
