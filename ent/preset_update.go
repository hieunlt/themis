// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hieunlt/themis/ent/predicate"
	"github.com/hieunlt/themis/ent/preset"
	"github.com/hieunlt/themis/ent/review"
)

// PresetUpdate is the builder for updating Preset entities.
type PresetUpdate struct {
	config
	hooks    []Hook
	mutation *PresetMutation
}

// Where appends a list predicates to the PresetUpdate builder.
func (pu *PresetUpdate) Where(ps ...predicate.Preset) *PresetUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDisplay sets the "display" field.
func (pu *PresetUpdate) SetDisplay(s string) *PresetUpdate {
	pu.mutation.SetDisplay(s)
	return pu
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (pu *PresetUpdate) SetNillableDisplay(s *string) *PresetUpdate {
	if s != nil {
		pu.SetDisplay(*s)
	}
	return pu
}

// SetIsActive sets the "is_active" field.
func (pu *PresetUpdate) SetIsActive(b bool) *PresetUpdate {
	pu.mutation.SetIsActive(b)
	return pu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pu *PresetUpdate) SetNillableIsActive(b *bool) *PresetUpdate {
	if b != nil {
		pu.SetIsActive(*b)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PresetUpdate) SetCreatedAt(t time.Time) *PresetUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PresetUpdate) SetNillableCreatedAt(t *time.Time) *PresetUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PresetUpdate) SetUpdatedAt(t time.Time) *PresetUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (pu *PresetUpdate) AddReviewIDs(ids ...int) *PresetUpdate {
	pu.mutation.AddReviewIDs(ids...)
	return pu
}

// AddReviews adds the "reviews" edges to the Review entity.
func (pu *PresetUpdate) AddReviews(r ...*Review) *PresetUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddReviewIDs(ids...)
}

// Mutation returns the PresetMutation object of the builder.
func (pu *PresetUpdate) Mutation() *PresetMutation {
	return pu.mutation
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (pu *PresetUpdate) ClearReviews() *PresetUpdate {
	pu.mutation.ClearReviews()
	return pu
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (pu *PresetUpdate) RemoveReviewIDs(ids ...int) *PresetUpdate {
	pu.mutation.RemoveReviewIDs(ids...)
	return pu
}

// RemoveReviews removes "reviews" edges to Review entities.
func (pu *PresetUpdate) RemoveReviews(r ...*Review) *PresetUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveReviewIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PresetUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PresetUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PresetUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PresetUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PresetUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := preset.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PresetUpdate) check() error {
	if v, ok := pu.mutation.Display(); ok {
		if err := preset.DisplayValidator(v); err != nil {
			return &ValidationError{Name: "display", err: fmt.Errorf(`ent: validator failed for field "Preset.display": %w`, err)}
		}
	}
	return nil
}

func (pu *PresetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(preset.Table, preset.Columns, sqlgraph.NewFieldSpec(preset.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Display(); ok {
		_spec.SetField(preset.FieldDisplay, field.TypeString, value)
	}
	if value, ok := pu.mutation.IsActive(); ok {
		_spec.SetField(preset.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(preset.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(preset.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   preset.ReviewsTable,
			Columns: preset.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !pu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   preset.ReviewsTable,
			Columns: preset.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   preset.ReviewsTable,
			Columns: preset.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{preset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PresetUpdateOne is the builder for updating a single Preset entity.
type PresetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PresetMutation
}

// SetDisplay sets the "display" field.
func (puo *PresetUpdateOne) SetDisplay(s string) *PresetUpdateOne {
	puo.mutation.SetDisplay(s)
	return puo
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (puo *PresetUpdateOne) SetNillableDisplay(s *string) *PresetUpdateOne {
	if s != nil {
		puo.SetDisplay(*s)
	}
	return puo
}

// SetIsActive sets the "is_active" field.
func (puo *PresetUpdateOne) SetIsActive(b bool) *PresetUpdateOne {
	puo.mutation.SetIsActive(b)
	return puo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (puo *PresetUpdateOne) SetNillableIsActive(b *bool) *PresetUpdateOne {
	if b != nil {
		puo.SetIsActive(*b)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PresetUpdateOne) SetCreatedAt(t time.Time) *PresetUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PresetUpdateOne) SetNillableCreatedAt(t *time.Time) *PresetUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PresetUpdateOne) SetUpdatedAt(t time.Time) *PresetUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (puo *PresetUpdateOne) AddReviewIDs(ids ...int) *PresetUpdateOne {
	puo.mutation.AddReviewIDs(ids...)
	return puo
}

// AddReviews adds the "reviews" edges to the Review entity.
func (puo *PresetUpdateOne) AddReviews(r ...*Review) *PresetUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddReviewIDs(ids...)
}

// Mutation returns the PresetMutation object of the builder.
func (puo *PresetUpdateOne) Mutation() *PresetMutation {
	return puo.mutation
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (puo *PresetUpdateOne) ClearReviews() *PresetUpdateOne {
	puo.mutation.ClearReviews()
	return puo
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (puo *PresetUpdateOne) RemoveReviewIDs(ids ...int) *PresetUpdateOne {
	puo.mutation.RemoveReviewIDs(ids...)
	return puo
}

// RemoveReviews removes "reviews" edges to Review entities.
func (puo *PresetUpdateOne) RemoveReviews(r ...*Review) *PresetUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveReviewIDs(ids...)
}

// Where appends a list predicates to the PresetUpdate builder.
func (puo *PresetUpdateOne) Where(ps ...predicate.Preset) *PresetUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PresetUpdateOne) Select(field string, fields ...string) *PresetUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Preset entity.
func (puo *PresetUpdateOne) Save(ctx context.Context) (*Preset, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PresetUpdateOne) SaveX(ctx context.Context) *Preset {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PresetUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PresetUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PresetUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := preset.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PresetUpdateOne) check() error {
	if v, ok := puo.mutation.Display(); ok {
		if err := preset.DisplayValidator(v); err != nil {
			return &ValidationError{Name: "display", err: fmt.Errorf(`ent: validator failed for field "Preset.display": %w`, err)}
		}
	}
	return nil
}

func (puo *PresetUpdateOne) sqlSave(ctx context.Context) (_node *Preset, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(preset.Table, preset.Columns, sqlgraph.NewFieldSpec(preset.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Preset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, preset.FieldID)
		for _, f := range fields {
			if !preset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != preset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Display(); ok {
		_spec.SetField(preset.FieldDisplay, field.TypeString, value)
	}
	if value, ok := puo.mutation.IsActive(); ok {
		_spec.SetField(preset.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(preset.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(preset.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   preset.ReviewsTable,
			Columns: preset.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !puo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   preset.ReviewsTable,
			Columns: preset.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   preset.ReviewsTable,
			Columns: preset.ReviewsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Preset{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{preset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
